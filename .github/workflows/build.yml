name: Build Full App (Electron + Python Backend)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-app:
    runs-on: windows-latest

    steps:
      # --------------------------
      # 1️⃣ Checkout do código
      # --------------------------
      - name: Checkout código
        uses: actions/checkout@v4

      # --------------------------
      # 2️⃣ Backend (Python + PyInstaller)
      # --------------------------
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências do backend
        run: |
          cd plano-estudos-backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: pwsh

      - name: Limpar build anterior do backend
        run: |
          cd plano-estudos-backend
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue dist, build, *.spec, dist-ready
        shell: pwsh

      - name: Gerar backend.exe
        run: |
          cd plano-estudos-backend
          
          # Gerar executável
          pyinstaller --onefile --noconsole app.py

          # Criar pasta para arquivos prontos
          New-Item -ItemType Directory -Force -Path dist-ready

          # Copiar executável
          Copy-Item -Path "dist\app.exe" -Destination "dist-ready\backend.exe" -Force

          # Copiar banco de dados se existir
          if (Test-Path "data.db") {
              Copy-Item -Path "data.db" -Destination "dist-ready\" -Force
          }

          # Copiar planilha se existir
          if (Test-Path "Planilha TCU - Auditor - Acompanhamento.xlsx") {
              Copy-Item -Path "Planilha TCU - Auditor - Acompanhamento.xlsx" -Destination "dist-ready\" -Force
          }
        shell: pwsh

      # --------------------------
      # 3️⃣ Frontend + Electron
      # --------------------------
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Limpar build anterior do frontend
        run: |
          cd plano-estudos-frontend
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue node_modules, dist, release, backend
        shell: pwsh

      - name: Instalar dependências do frontend
        run: |
          cd plano-estudos-frontend
          npm install
        shell: pwsh

      - name: Copiar backend para recursos do Electron
        run: |
          # Cria estrutura de pastas
          New-Item -ItemType Directory -Force -Path plano-estudos-frontend\backend\dist
          
          # Copia executável mantendo nome original
          Copy-Item -Path plano-estudos-backend\dist\app.exe -Destination plano-estudos-frontend\backend\dist\app.exe -Force
          
          # Copia planilha para o diretório principal do backend
          Copy-Item -Path "plano-estudos-backend\Planilha TCU - Auditor - Acompanhamento.xlsx" -Destination plano-estudos-frontend\backend\ -Force
          
          # Cria banco de dados vazio se não existir
          $dbPath = "plano-estudos-backend\data.db"
          if (-not (Test-Path $dbPath)) {
              New-Item -ItemType File -Path $dbPath
          }
          Copy-Item -Path $dbPath -Destination plano-estudos-frontend\backend\ -Force
        shell: pwsh

      - name: Verificar estrutura de arquivos copiados
        run: |
          Write-Host "=== VERIFICAÇÃO DA ESTRUTURA DE BACKEND ==="
          
          # Verifica estrutura de pastas
          Write-Host "Estrutura de backend:"
          Get-ChildItem -Path "plano-estudos-frontend\backend" -Recurse | ForEach-Object {
            Write-Host "  $($_.FullName)"
          }
          
          # Verifica arquivos críticos
          $criticalFiles = @(
            "plano-estudos-frontend\backend\dist\app.exe",
            "plano-estudos-frontend\backend\data.db",
            "plano-estudos-frontend\backend\Planilha TCU - Auditor - Acompanhamento.xlsx"
          )
          
          Write-Host "`n=== VERIFICAÇÃO DE ARQUIVOS CRÍTICOS ==="
          $allFilesExist = $true
          foreach ($file in $criticalFiles) {
            if (Test-Path $file) {
              $size = (Get-Item $file).Length
              Write-Host "✅ $file ($size bytes)"
            } else {
              Write-Host "❌ $file (NÃO ENCONTRADO)"
              $allFilesExist = $false
            }
          }
          
          if (-not $allFilesExist) {
            Write-Host "`n❌ ERRO: Alguns arquivos críticos não foram encontrados!"
            exit 1
          } else {
            Write-Host "`n✅ Todos os arquivos críticos estão presentes!"
          }
        shell: pwsh

      - name: Build instalador Electron
        run: |
          cd plano-estudos-frontend
          npm run dist -- --win
        shell: pwsh

      - name: Verificar resultado do build
        run: |
          Write-Host "=== VERIFICAÇÃO DO BUILD FINAL ==="
          
          # Lista todos os arquivos gerados
          Write-Host "Arquivos no diretório de release:"
          Get-ChildItem -Path "plano-estudos-frontend\release" -Recurse | ForEach-Object {
            $size = $_.Length
            Write-Host "  $($_.FullName) ($size bytes)"
          }
          
          # Verifica se o instalador foi criado
          $installer = Get-ChildItem -Path "plano-estudos-frontend\release" -Filter "*.exe" | Select-Object -First 1
          if ($installer) {
            Write-Host "`n✅ Instalador criado: $($installer.Name) ($($installer.Length) bytes)"
          } else {
            Write-Host "`n❌ Nenhum instalador foi encontrado!"
            exit 1
          }
        shell: pwsh

      - name: Verificação avançada do conteúdo
        run: |
          Write-Host "=== VERIFICAÇÃO AVANÇADA ==="
          
          # Verifica se o app.exe é um executável válido
          $appExe = "plano-estudos-frontend\backend\dist\app.exe"
          if (Test-Path $appExe) {
            try {
              $versionInfo = (Get-Item $appExe).VersionInfo
              Write-Host "✅ $appExe é um executável válido"
              Write-Host "   Versão do arquivo: $($versionInfo.FileVersion)"
              Write-Host "   Tamanho: $((Get-Item $appExe).Length) bytes"
            } catch {
              Write-Host "⚠️  $appExe existe mas pode estar corrompido"
            }
          }
          
          # Verifica se o banco de dados SQLite é válido
          $dbFile = "plano-estudos-frontend\backend\data.db"
          if (Test-Path $dbFile) {
            $dbSize = (Get-Item $dbFile).Length
            Write-Host "✅ Banco de dados: $dbSize bytes"
            
            # Tenta uma consulta simples se o sqlite3 estiver disponível
            try {
              sqlite3 $dbFile "SELECT name FROM sqlite_master WHERE type='table';" 2>$null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Estrutura do banco de dados é válida"
              }
            } catch {
              Write-Host "⚠️  Não foi possível validar a estrutura do banco de dados"
            }
          }
        shell: pwsh

      # --------------------------
      # 4️⃣ Upload final
      # --------------------------
      - name: Upload instalador
        uses: actions/upload-artifact@v4
        with:
          name: full-installer
          path: plano-estudos-frontend/release/*.exe
